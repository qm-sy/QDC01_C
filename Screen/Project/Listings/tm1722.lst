C51 COMPILER V9.60.7.0   TM1722                                                            05/24/2025 00:00:20 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TM1722
OBJECT MODULE PLACED IN ..\Output\tm1722.obj
COMPILER INVOKED BY: D:\APP\Keil_STM32\C51\BIN\C51.EXE ..\BSP\Src\tm1722.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driv
                    -er;..\SYSTEM\Inc;..\BSP\Inc;..\Core\Inc;..\Emembed\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\tm1722.lst) OBJECT(..\Output
                    -\tm1722.obj)

line level    source

   1          #include "tm1722.h"
   2          
   3          LCD_INFO lcd_info;
   4          
   5          uint8_t value_03 = 0;  //该地址的值
   6          uint8_t value_06 = 0;
   7          uint8_t value_07 = 0;
   8          uint8_t value_0A = 0;
   9          uint8_t value_0B = 0;
  10          uint8_t value_0E = 0;
  11          uint8_t value_0F = 0; 
  12          
  13          uint8_t addr_tab[7] = { 0xc3,0xc6,0xc7,0xca,0xcb,0xce,0xcf};
  14          
  15          uint8_t num_tab[10] = {0xF5,0x05,0xD3,0x97,0x27,0xB6,0xF6,0x15,0xF7,0xB7};
  16                               /*  0    1    2    3    4    5    6    7    8    9  */
  17          
  18          void screen_init( void )
  19          {
  20   1          TM1722_WR = 1;            //端口配置初始化
  21   1          TM1722_CS = 1;
  22   1          TM1722_DATA = 1;
  23   1          TM1722_Write_Byte(0x00); //工作模式
  24   1          TM1722_WR = 1;
  25   1          TM1722_Write_Byte(0x44);   //固定地址模式
  26   1          TM1722_WR = 1;
  27   1          
  28   1          screen_clear();
  29   1          
  30   1          screen_display();
  31   1      }
  32           
  33          void lcd_info_init( void )
  34          {
  35   1          lcd_info.channel_num = 0;
  36   1          lcd_info.power_level = 0;
  37   1          lcd_info.fan_level = 0;
  38   1          lcd_info.sync_flag = 0;
  39   1          lcd_info.mode_num  = 1;
  40   1      
  41   1          lcd_info.fan_rotate_flag = 1;
  42   1          lcd_info.lcd_connect_flag = 0;
  43   1          lcd_info.alarm_set_flag = 0;
  44   1      
  45   1          lcd_info.power_on = 0;
  46   1      }
  47          
  48          void led_status( uint8_t status ) 
  49          {
  50   1          switch (status)
  51   1          {
  52   2              case LED_OPEN:
  53   2              BL = 0;
C51 COMPILER V9.60.7.0   TM1722                                                            05/24/2025 00:00:20 PAGE 2   

  54   2              LED1 = LED2 = LED3 = LED4 = LED5 = LED6 = LED_ON;
  55   2      
  56   2              break;
  57   2          
  58   2              case LED_SLEEP:
  59   2              BL = 1;
  60   2              LED3 = LED_ON;
  61   2              LED2 = LED1 = LED4 = LED5 = LED6 = LED_OFF;
  62   2              
  63   2              break;
  64   2      
  65   2          default:
  66   2              break;
  67   2          }
  68   1      }
  69          void screen_clear( void ) //清显示缓存
  70          {
  71   1          uint8_t i;
  72   1          alarm_dis(0);
  73   1          Celsius_dis(0);
  74   1          sync_dis(0);
  75   1          percentage_dis(0);
  76   1          mode_dis(0);
  77   1          for(i = 0;i < 7;i++)
  78   1          {
  79   2              screen_write_val(addr_tab[i],0);
  80   2          }
  81   1      }
  82          
  83          void screen_display( void )  //显示开
  84          {
  85   1          TM1722_Write_Byte(0x93); 
  86   1          TM1722_WR = 1;
  87   1      }
  88          
  89          void screen_write_val(uint8_t addr,uint8_t dat)
  90          {
  91   1          TM1722_Write_Byte(addr); 
  92   1          TM1722_Write_Byte(dat); 
  93   1          TM1722_WR = 1;
  94   1      }
  95          
  96          void TM1722_Write_Byte(uint8_t dat)
  97          {
  98   1        uint8_t i;
  99   1               
 100   1        delay_us(50); //用于片选信号的延时
 101   1        TM1722_WR = 0;     //有效的片选信号
 102   1        for(i = 0;i < 8;i++)
 103   1        {
 104   2          TM1722_CS  =  0;
 105   2          TM1722_DATA  =  dat&0x01;
 106   2          TM1722_CS  =  1;    //时钟上升沿，送入一位数据
 107   2          dat >>= 1;      
 108   2        }
 109   1        delay_us(50);   //用于片选信号的延时
 110   1      }
 111          
 112          void num_dis(uint8_t num)
 113          {
 114   1          uint8_t hundreds = num / 100;  // 获取百位数
 115   1          uint8_t tens = (num / 10) % 10;  // 获取十位数
C51 COMPILER V9.60.7.0   TM1722                                                            05/24/2025 00:00:20 PAGE 3   

 116   1          uint8_t ones = num % 10;  // 获取个位数
 117   1          
 118   1          value_0B &= 0x00;
 119   1          value_0A &= 0X00;
 120   1          value_07 &= 0X00;
 121   1          value_06 &= 0X08;
 122   1          
 123   1          value_0B |= (num_tab[hundreds]>>4);
 124   1          value_0A |= num_tab[hundreds];
 125   1          value_07 |= num_tab[tens];
 126   1          value_06 |= num_tab[ones]; 
 127   1      
 128   1          if((num<10)&&(num>=0))
 129   1          {
 130   2              screen_write_val(addr_tab[ADDR_0B],0x00);
 131   2      
 132   2              screen_write_val(addr_tab[ADDR_0A],0X00);
 133   2              
 134   2              screen_write_val(addr_tab[ADDR_07],0X00);
 135   2      
 136   2              screen_write_val(addr_tab[ADDR_06],value_06);  
 137   2          }
 138   1          else if((num<100)&&(num>=10))
 139   1          {
 140   2              screen_write_val(addr_tab[ADDR_0B],0x00);
 141   2      
 142   2              screen_write_val(addr_tab[ADDR_0A],0X00);
 143   2              
 144   2              screen_write_val(addr_tab[ADDR_07],value_07);
 145   2      
 146   2              screen_write_val(addr_tab[ADDR_06],value_06);   
 147   2          }
 148   1          else
 149   1          {
 150   2              screen_write_val(addr_tab[ADDR_0B],value_0B);
 151   2              
 152   2              screen_write_val(addr_tab[ADDR_0A],value_0A);
 153   2              
 154   2              screen_write_val(addr_tab[ADDR_07],value_07);
 155   2      
 156   2              screen_write_val(addr_tab[ADDR_06],value_06);
 157   2          }
 158   1      }
 159          
 160          
 161          void wind_dis(uint8_t num)
 162          {
 163   1          value_0F &= 0x30;
 164   1          
 165   1          switch(num)
 166   1          {
 167   2              case 0:
 168   2                  value_0F |= 0x00;
 169   2                  break;
 170   2              
 171   2              case 1:
 172   2                  value_0F |= 0x40;
 173   2                  break;
 174   2              
 175   2              case 2:
 176   2                  value_0F |= 0xc0;
 177   2                  break;
C51 COMPILER V9.60.7.0   TM1722                                                            05/24/2025 00:00:20 PAGE 4   

 178   2              
 179   2              case 3:
 180   2                  value_0F |= 0xc8;
 181   2                  break;
 182   2              
 183   2              case 4:
 184   2                  value_0F |= 0xcc;
 185   2                  break;
 186   2              
 187   2              case 5:
 188   2                  value_0F |= 0xce;
 189   2                  break;
 190   2              
 191   2              case 6:
 192   2                  value_0F |= 0xcf;
 193   2                  break;
 194   2              
 195   2              default:
 196   2                  break;
 197   2          }
 198   1          
 199   1          screen_write_val(addr_tab[ADDR_0F],value_0F);
 200   1      }
 201          
 202          
 203          void channel_dis(uint8_t num)
 204          {
 205   1          value_0E &= 0x80;
 206   1          value_0B &= 0x00;
 207   1          
 208   1          switch(num)
 209   1          {
 210   2              case 0:
 211   2                  value_0E &= 0x00;
 212   2                  value_0B &= 0x00;
 213   2                  break;
 214   2      
 215   2              case 1:
 216   2                  value_0E |= 0x04;
 217   2                  value_0B |= 0x40;
 218   2                  break;
 219   2              
 220   2              case 2:
 221   2                  value_0E |= 0x02;
 222   2                  value_0B |= 0x20;
 223   2                  break;
 224   2              
 225   2              case 3:
 226   2                  value_0E |= 0x01;
 227   2                  value_0B |= 0x10;
 228   2                  break;
 229   2              
 230   2              case 4:
 231   2                  value_0E |= 0x06;
 232   2                  value_0B |= 0x60;
 233   2                  break;
 234   2              
 235   2              case 5:
 236   2                  value_0E |= 0x05;
 237   2                  value_0B |= 0x50;
 238   2                  break;
 239   2              
C51 COMPILER V9.60.7.0   TM1722                                                            05/24/2025 00:00:20 PAGE 5   

 240   2              case 6:
 241   2                  value_0E |= 0x03;
 242   2                  value_0B |= 0x30;
 243   2                  break;
 244   2              
 245   2              case 7:
 246   2                  value_0E |= 0x07;
 247   2                  value_0B |= 0x70;
 248   2                  break;
 249   2              
 250   2              default:
 251   2                  break;
 252   2          }
 253   1          
 254   1          screen_write_val(addr_tab[ADDR_0E],value_0E);
 255   1          screen_write_val(addr_tab[ADDR_0B],value_0B);
 256   1      }
 257          
 258          
 259          void sun_dis(uint8_t on_off)
 260          {
 261   1          value_0E &= 0xf7;
 262   1          if(on_off==DIS_ON)
 263   1          {
 264   2              value_0E |= 0x08;   
 265   2          }
 266   1          screen_write_val(addr_tab[ADDR_0E],value_0E);
 267   1      }
 268          
 269          void sync_dis(uint8_t on_off)
 270          {
 271   1          value_03 &= 0xef;
 272   1          if(on_off==DIS_ON)
 273   1          {
 274   2              value_03 |= 0x10;   
 275   2          }
 276   1          screen_write_val(addr_tab[ADDR_03],value_03);
 277   1      }
 278          
 279          void alarm_dis(uint8_t on_off)
 280          {
 281   1          value_03 &= 0xdf;
 282   1          if(on_off==DIS_ON)
 283   1          {
 284   2              value_03 |= 0x20;   
 285   2          }
 286   1          screen_write_val(addr_tab[ADDR_03],value_03);
 287   1      }
 288          
 289          
 290          void Celsius_dis(uint8_t on_off)
 291          {
 292   1          value_03 &= 0xbf;
 293   1          if(on_off==DIS_ON)
 294   1          {
 295   2              value_03 |= 0x40;   
 296   2          }
 297   1          screen_write_val(addr_tab[ADDR_03],value_03);
 298   1      }
 299          
 300          void mode_dis(uint8_t on_off)
 301          {
C51 COMPILER V9.60.7.0   TM1722                                                            05/24/2025 00:00:20 PAGE 6   

 302   1          value_03 &= 0x7f;
 303   1          if(on_off==DIS_ON)
 304   1          {
 305   2              value_03 |= 0x80;   
 306   2          }
 307   1          screen_write_val(addr_tab[ADDR_03],value_03);
 308   1      }
 309          
 310          void percentage_dis(uint8_t on_off)
 311          {
 312   1          value_06 &= 0xf7;
 313   1          if(on_off==DIS_ON)
 314   1          {
 315   2              value_06 |= 0x08;   
 316   2          }
 317   1          screen_write_val(addr_tab[ADDR_06],value_06);
 318   1      }
 319          
 320          
 321          void fan_center_dis(uint8_t on_off)
 322          {
 323   1          value_0F &= 0xdf;
 324   1          if(on_off==DIS_ON)
 325   1          {
 326   2              value_0F |= 0x20;   
 327   2          }
 328   1          screen_write_val(addr_tab[ADDR_0F],value_0F);
 329   1      }
 330          
 331          void fan_leaf1_dis(uint8_t on_off)
 332          {
 333   1          value_0E &= 0xef;
 334   1          if(on_off==DIS_ON)
 335   1          {
 336   2              value_0E |= 0x10;   
 337   2          }
 338   1          screen_write_val(addr_tab[ADDR_0E],value_0E);
 339   1      }
 340          
 341          void fan_leaf2_dis(uint8_t on_off)
 342          {
 343   1          value_0F &= 0xef;
 344   1          if(on_off==DIS_ON)
 345   1          {
 346   2              value_0F |= 0x10;   
 347   2          }
 348   1          screen_write_val(addr_tab[ADDR_0F],value_0F);
 349   1      }
 350          
 351          void fan_rotate()
 352          {  
 353   1          if( lcd_info.alarm_set_flag == 0 )
 354   1          {   
 355   2              fan_center_dis(DIS_ON);
 356   2              if( lcd_info.fan_level > 0 )
 357   2              {
 358   3                  if( lcd_info.sync_flag == 1 )
 359   3                  {
 360   4                      sync_dis(DIS_ON);
 361   4                      if( lcd_info.signal_in == 1 )
 362   4                      {
 363   5                          fan_leaf1_dis(lcd_info.fan_rotate_flag);
C51 COMPILER V9.60.7.0   TM1722                                                            05/24/2025 00:00:20 PAGE 7   

 364   5                          fan_leaf2_dis(1 - lcd_info.fan_rotate_flag);
 365   5                          sun_dis(DIS_ON);
 366   5                      }else
 367   4                      {
 368   5                          fan_leaf1_dis(DIS_ON);
 369   5                          fan_leaf2_dis(DIS_OFF);
 370   5                          sun_dis(DIS_OFF);
 371   5                      }
 372   4                  }else
 373   3                  {
 374   4                      sync_dis(DIS_OFF);
 375   4                      fan_leaf1_dis(lcd_info.fan_rotate_flag);
 376   4                      fan_leaf2_dis(1 - lcd_info.fan_rotate_flag);
 377   4                      sun_dis(DIS_ON);
 378   4                  }
 379   3              }else
 380   2              {
 381   3                  fan_leaf1_dis(DIS_ON);
 382   3                  fan_leaf2_dis(DIS_OFF);
 383   3              }
 384   2          }
 385   1      }
 386          
 387          void screen_all_dis( void )
 388          {
 389   1          num_dis(lcd_info.power_level);
 390   1          wind_dis(lcd_info.fan_level);
 391   1          channel_dis(lcd_info.channel_num);
 392   1          sync_dis(lcd_info.sync_flag);
 393   1          if( lcd_info.sync_flag == 1 )
 394   1          {
 395   2              sun_dis(DIS_OFF);
 396   2          }else
 397   1          {
 398   2              sun_dis(DIS_ON);
 399   2          }
 400   1          percentage_dis(DIS_ON);
 401   1          Celsius_dis(DIS_OFF);
 402   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1214    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     36       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
