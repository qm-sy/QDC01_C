C51 COMPILER V9.60.7.0   TOUCH                                                             05/23/2025 10:47:00 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TOUCH
OBJECT MODULE PLACED IN ..\Output\touch.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE ..\BSP\Src\touch.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver;.
                    -.\SYSTEM\Inc;..\BSP\Inc;..\Core\Inc;..\Emembed\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\touch.lst) OBJECT(..\Output\touc
                    -h.obj)

line level    source

   1          #include "touch.h"
*** ERROR C231 IN LINE 20 OF ..\Core\Inc\gpio.h: 'WR': redefinition
*** ERROR C129 IN LINE 22 OF ..\BSP\Inc\touch.h: missing ';' before 'TK_cnt'
   2          
   3          //P54 P13 14 15 TK2 3 4 5
   4          uint16_t                 TK_cnt[6];     // 键计数值
   5          uint32_t                 TK_zero[6];    // 0点读数 
   6          uint16_t T_KeyCmp[6] ;
   7          bit     B_ReadKeyOk=1;  //标志已转换完成16个键
   8          uint16_t Count[6] ;
   9          uint16_t LastState ;                                            //8位变量       b0=1，代表k0上一次按下过 
  10          KEY_VAL key_val;
  11                  
  12          void KEY_T_Init(void)
  13          {
  14              u8 i,j=0;
  15          
  16                  TSRT = 0x00;            //没有LED分时扫描
  17                  TSCHEN1 = 0x3f; //TK00~TK07
  18                  TSCHEN2 = 0x00; //TK08~TK15
  19                  
  20                  TSCFG1  = (7<<4) + 3;   //开关电容工作频率 = fosc/(2*(TSCFG1[6:4]+1)), 放电时间(系统时钟周期数) 0(125) 1(25
             -0) 2(500) 3(1000) 4(2000) 5(2500) 6(5000) 7(7500) 最小3
  21                  TSCFG2  = 2;                            //配置触摸按键控制器的内部参考电压(AVCC的分压比), 0(1/4)  1(1/2)  2(5/8)  3(3/4)
  22                  TSCTRL = 0xA0;                  //开始自动扫描, 无平均, B7: TSGO,  B6: SINGLE,  B5: TSWAIT, B4: TSWUCS, B3: TSDCEN, B2: 
             -TSWUEN, B1 B0: TSSAMP
  23                  
  24          //      TSCTRL = (1<<7) + (1<<6);       //开始单次扫描, 无平均
  25          //      TSCTRL = (1<<7) + (1<<6)+3;     //开始单次扫描, 4次平均
  26          //      TSCTRL = (1<<7) + (1<<6)+1;     //开始单次扫描, 2次平均
  27          //      TSWUTC = 12;            //100ms唤醒一次
  28                  IE2 |= 0x80;                    //使能触摸中断 
  29              EA = 1;
  30              
  31                  TSCTRL = 0xA0;
  32                  
  33                  delay_ms(100);
  34              for(i=0;i<6;i++)
  35                  {
  36                          TK_zero[i]=0;
  37                  }
  38                          
  39              while(j<6)
  40              {
  41                  if( B_ReadKeyOk )
  42                  {
  43                      for(i=0;i<6;i++)
  44                          TK_zero[i] += TK_cnt[i];
  45                      B_ReadKeyOk = 0;
  46                      j++;
  47                  }
  48                  delay_ms(50);
  49              }
C51 COMPILER V9.60.7.0   TOUCH                                                             05/23/2025 10:47:00 PAGE 2   

  50              for(i=0;i<6;i++)
  51              {
  52                  TK_zero[i]=(TK_zero[i]>>3);
  53          //        printf("%u\t",(u16)TK_zero[i]);
  54                  T_KeyCmp[i] = 1500;
  55                          //T_KeyCmp[i] = TK_zero[i] * 0.3;
  56              }    
  57              
  58          }
  59          
  60          
  61          
  62          //========================================================================
  63          // 函数名称: KEY_Deal
  64          // 函数功能: 按键状态读取
  65          // 入口参数: 无
  66          // 函数返回: 无
  67          // 当前版本: VER1.0
  68          // 修改日期: 2023 - 1-1
  69          // 当前作者:
  70          // 其他备注:循环读取八个端口的状态，并将按下的时间赋值给 Count 数组，按下的状态赋值给LastState
  71          //========================================================================
  72          void KEY_Deal(void)                     //检查所有的按键状态 10ms执行一次
  73          {
  74                  u8 i = 0;
  75              
  76          //    printf("(%u,%u,%u)\r\n",(u16)TK_cnt[0],(u16)TK_cnt[1],(u16)TK_cnt[2]);
  77              
  78                  for(i=0;i<6;i++)                                        //循环8次 i的取值范围是0-7  代表了P30-P37的状态查询
  79                  {
  80                          if( i < 3 )
  81                          {
  82                                  if( TK_cnt[i]< (TK_zero[i]-T_KeyCmp[i]))                        //持续按下，变量+1 
  83                                  {
  84                                          if( Count[i]<60000 )
  85                                                  Count[i] ++;                    //按键按下，这个计数变量+1
  86                                  }
  87                                  else                                                    //按键松开了，变量清0
  88                                  {
  89                                          if( Count[i]>0 )                        //如果这个变量是按下过的
  90                                          {
  91                                                  LastState |= (1<<i);    //这个变量相应的标志位置位
  92                                          }
  93                                          else
  94                                          {
  95                                                  LastState &= ~(1<<i);   //这个变量相应的标志位清0
  96                                          }
  97                                          Count[i] = 0;                           //按键按下，这个计数变量清0
  98                                  }
  99                          }else
 100                          {
 101                                  if( TK_cnt[i]> (TK_zero[i]+T_KeyCmp[i]))                        //持续按下，变量+1                      
 102                                  {
 103                                          if( Count[i]<60000 )
 104                                                  Count[i] ++;                    //按键按下，这个计数变量+1
 105                                  }
 106                                  else                                                    //按键松开了，变量清0
 107                                  {
 108                                          if( Count[i]>0 )                        //如果这个变量是按下过的
 109                                          {
 110                                                  LastState |= (1<<i);    //这个变量相应的标志位置位
 111                                          }
C51 COMPILER V9.60.7.0   TOUCH                                                             05/23/2025 10:47:00 PAGE 3   

 112                                          else
 113                                          {
 114                                                  LastState &= ~(1<<i);   //这个变量相应的标志位清0
 115                                          }
 116                                          Count[i] = 0;                           //按键按下，这个计数变量清0
 117                                  }
 118                          }
 119                  }
 120          }
 121          
 122          //========================================================================
 123          // 函数名称: KEY_ReadState
 124          // 函数功能: 读取指定的按钮的状态
 125          // 入口参数: @keynum : 按钮的端口号 例如P32端口，端口号就是2
 126          // 函数返回: 看其他备注
 127          // 当前版本: VER1.0
 128          // 修改日期: 2023 - 1- 1
 129          // 当前作者:
 130          // 其他备注: 函数返回值如下
 131          //      #define KEY_NOPRESS             0               //按键未按下
 132          //      #define KEY_FILCKER             1               //消抖
 133          //      #define KEY_PRESS               2               //单击
 134          //      #define KEY_PRESSOVER   3               //单击结束
 135          //      #define KEY_LONGPRESS   4               //长按3秒
 136          //      #define KEY_LONGOVER    5               //长按结束
 137          //      #define KEY_RELAX               6               //按键松开
 138          
 139          //========================================================================
 140          
 141          u8 KEY_ReadState(u8 keynum)     //读取指定的按键的状态 10ms执行一次
 142          {
 143                  if( Count[keynum]>0 )                                   //按键是按下的各种状态返回
 144                  {
 145                          if( Count[keynum]<3 )                           //按下<30ms 返回消抖状态
 146                          {
 147                                  return KEY_FILCKER;
 148                          }
 149                          else if( Count[keynum]==3 )                     //按下正好30ms 返回单击
 150                          {
 151                                  return KEY_PRESS;
 152                          }
 153                          else if( Count[keynum]<40 )             //按下不到3000ms 返回单击结束
 154                          {
 155                                  return KEY_PRESSOVER;
 156                          }               
 157                          else if( Count[keynum]==40 )            //按下正好3000ms 返回长按状态
 158                          {
 159                                  return KEY_LONGPRESS;
 160                          }       
 161                          else                                                            //长按结束
 162                          {
 163                                  return KEY_LONGOVER;
 164                          }                       
 165                  }
 166                  else                                                                    //按键已经松开了，返回各种状态
 167                  {
 168                          if( LastState &( 1<<keynum ) )          //按键之前按下过
 169                          {
 170                                  return KEY_RELAX;               
 171                          }
 172                          else                                                            //按键之前没有按下
 173                          {
C51 COMPILER V9.60.7.0   TOUCH                                                             05/23/2025 10:47:00 PAGE 4   

 174                                  return KEY_NOPRESS;
 175                          }
 176                  }
 177          }
 178          
 179          void key_val_init( void )
 180          {
 181                  key_val.key1_scan_allow = 1;       
 182              key_val.key2_scan_allow = 1;  
 183              key_val.key3_scan_allow = 1;   
 184              key_val.key4_scan_allow = 1;   
 185              key_val.key5_scan_allow = 1;   
 186              key_val.key6_scan_allow = 1; 
 187          }
 188          void key_scan( void )
 189          {
 190                  KEY_Deal();     
 191                  if( KEY_ReadState(KEY1) == KEY_PRESS)
 192                  {
 193                          if( lcd_info.power_on == 0 )
 194                          {
 195                                  led_status(LED_OPEN);
 196                                  lcd_info.power_on = 1;
 197                                  slave_work_ctrl();
 198                          }
 199                  }
 200                  if( KEY_ReadState(KEY1) == KEY_LONGOVER )       
 201                  {
 202                          if( lcd_info.power_on == 1 )
 203                          {
 204                                  led_status(LED_SLEEP);
 205                                  lcd_info.power_on = 0;
 206                                  slave_sleep_ctrl();
 207                                  modbus.scan_flag_04_allow = 0;
 208                          }
 209                  }
 210                  if( lcd_info.power_on == 1 )
 211                  {
 212                          if(( KEY_ReadState(KEY4) == KEY_PRESS ) && ( key_val.key4_scan_allow == 1 ))                                                                                    //调节通道
 213                          {
 214                                  modbus.scan_flag_04_allow = 0;
 215                                  if( lcd_info.alarm_set_flag == 1 )
 216                                  {
 217                                          lcd_info.alarm_set_flag = 0;
 218                                          screen_all_dis();
 219                                  }else
 220                                  {
 221                                          channel_choose();
 222                                          send_to_slave_16();
 223                                  }
 224                                  modbus.scan_flag_04_allow = 1;
 225                          }
 226                          if(( KEY_ReadState(KEY2) == KEY_PRESS ) && ( key_val.key2_scan_allow == 1 ))    //调节功率↑
 227                          {
 228                                  modbus.scan_flag_04_allow = 0;
 229                                  key_up();
 230                                  send_to_slave_16();
 231                          }
 232                          if(( KEY_ReadState(KEY3) == KEY_PRESS ) && ( key_val.key3_scan_allow == 1 ))    //调节功率↓
 233                          {
 234                                  modbus.scan_flag_04_allow = 0;
 235                                  key_down();
C51 COMPILER V9.60.7.0   TOUCH                                                             05/23/2025 10:47:00 PAGE 5   

 236                                  send_to_slave_16();
 237                          }
 238                          if(( KEY_ReadState(KEY5) == KEY_PRESS ) && ( key_val.key5_scan_allow == 1 ))
 239                          {
 240                                  modbus.scan_flag_04_allow = 0;
 241                                  mode_choose();
 242                                  send_to_slave_06();
 243                                  delay_ms(100);
 244                          }
 245          
 246                          if( KEY_ReadState(KEY6) == KEY_LONGOVER )                                                                               //调节风力
 247                          {
 248                                  modbus.scan_flag_04_allow = 0;
 249          
 250                                  key_val.key2_scan_allow = 0;
 251                                  key_val.key3_scan_allow = 0;
 252                                  key_val.key4_scan_allow = 0;
 253                                  key_val.key5_scan_allow = 0;
 254          
 255                                  if( KEY_ReadState(KEY2) == KEY_PRESS )
 256                                  {
 257                                          fan_up();
 258                                          send_to_slave_16();
 259                                  }
 260                                  if( KEY_ReadState(KEY3) == KEY_PRESS )
 261                                  {
 262                                          fan_down();
 263                                          send_to_slave_16();
 264                                  }
 265                                  if( KEY_ReadState(KEY4) == KEY_PRESS )
 266                                  {
 267                                          lcd_info.alarm_set_flag = 1;
 268                                  }
 269                                  if( KEY_ReadState(KEY5) == KEY_PRESS )
 270                                  {
 271                                          lcd_info.sync_flag = 1 - lcd_info.sync_flag;
 272                                          sync_dis(lcd_info.sync_flag);
 273                                          send_to_slave_16();
 274                                  }
 275                          }
 276                          if( KEY_ReadState(KEY6) == KEY_NOPRESS )//释放按键2、3
 277                          {
 278                                  key_val.key2_scan_allow = 1;
 279                                  key_val.key3_scan_allow = 1;
 280                                  key_val.key4_scan_allow = 1;
 281                                  key_val.key5_scan_allow = 1;
 282                          }
 283                  }
 284                  
 285          }
 286          
 287          void channel_choose( void )
 288          {
 289              if(lcd_info.channel_num == 7)
 290              {
 291                  lcd_info.channel_num = 1;
 292              }
 293              else
 294              {
 295                  lcd_info.channel_num += 1;
 296              }
 297              channel_dis(lcd_info.channel_num);
C51 COMPILER V9.60.7.0   TOUCH                                                             05/23/2025 10:47:00 PAGE 6   

 298          }
 299          
 300          void key_up( void )
 301          {
 302                  if( lcd_info.alarm_set_flag == 0 )
 303                  {
 304                          if( lcd_info.power_level < 100 )
 305                          {
 306                                  lcd_info.power_level += 5;
 307                          }
 308          
 309                          num_dis(lcd_info.power_level);
 310                  }else
 311                  {
 312                          if( lcd_info.alarm_temp_val < 120 )
 313                          {
 314                                  lcd_info.alarm_temp_val += 1;
 315                          }
 316                          num_dis(lcd_info.alarm_temp_val);
 317                  }
 318          }
 319          
 320          void key_down( void )
 321          {
 322                  if( lcd_info.alarm_set_flag == 0 )
 323                  {
 324                          if( lcd_info.power_level > 5 )
 325                          {
 326                                  lcd_info.power_level -= 5;
 327                          }
 328          
 329                          num_dis(lcd_info.power_level);
 330                  }else
 331                  {
 332                          if( lcd_info.alarm_temp_val > 40 )
 333                          {
 334                                  lcd_info.alarm_temp_val -= 1;
 335                          }
 336                          num_dis(lcd_info.alarm_temp_val);
 337                  }
 338          }
 339          
 340          void fan_up( void )
 341          {
 342              if( lcd_info.fan_level < 6 )
 343              {
 344                  lcd_info.fan_level++;
 345              }
 346          
 347              wind_dis(lcd_info.fan_level);
 348          }
 349          
 350          void fan_down( void )
 351          {
 352              if( lcd_info.fan_level > 0 )
 353              {
 354                  lcd_info.fan_level--;
 355              }
 356          
 357              wind_dis(lcd_info.fan_level);
 358          }
 359          
C51 COMPILER V9.60.7.0   TOUCH                                                             05/23/2025 10:47:00 PAGE 7   

 360          
 361          void mode_choose( void )
 362          {
 363          
 364              if(lcd_info.mode_num < 6)
 365              {
 366                  lcd_info.mode_num++;
 367                          if( lcd_info.mode_num == 6 )
 368                          {
 369                                  lcd_info.mode_num = 1;
 370                          }
 371              }
 372              
 373              screen_clear();                //一次清屏
 374          
 375              mode_dis(DIS_ON);       
 376              num_dis(lcd_info.mode_num);           //显示模式序号和标志
 377                   
 378              delay_ms(500);
 379              
 380              screen_clear();                 //二次清屏
 381              
 382              mode_dis(DIS_OFF);
 383          
 384              sync_dis(lcd_info.sync_flag);
 385              num_dis(lcd_info.power_level);
 386              channel_dis(lcd_info.channel_num);
 387              wind_dis(lcd_info.fan_level);       
 388                  percentage_dis(DIS_ON);  
 389          }

C51 COMPILATION COMPLETE.  0 WARNING(S),  2 ERROR(S)
